module processor (
    input clk,  // clock
    input rst,  // reset
    input button[5],
    input start_button,
    input reset_button,
    output display_seg0[8],
    output display_seg1[8],
    output display_seg2[8],
    output display_seg3[8],
    output out[25]
  ) {
  
  sig completed;
  sig pos[25];
  
  .clk(clk) {
    edge_detector left_btn(#RISE(1), #FALL(0));
    button_conditioner left_btn_cond;
    
    edge_detector right_btn(#RISE(1), #FALL(0));
    button_conditioner right_btn_cond;
    
    edge_detector up_btn(#RISE(1), #FALL(0));
    button_conditioner up_btn_cond;
    
    edge_detector down_btn(#RISE(1), #FALL(0));
    button_conditioner down_btn_cond;
    
    edge_detector enter_btn(#RISE(1), #FALL(0));
    button_conditioner enter_btn_cond;
    
    edge_detector start_btn(#RISE(1), #FALL(0));
    button_conditioner start_btn_cond;
    
    edge_detector reset_btn(#RISE(1), #FALL(0));
    button_conditioner reset_btn_cond;
    
    counter reset_ctr(#SIZE(4),#DIV(30));
    
    .rst(rst) {
      fsm state = {IDLE,GENMAP,PLAYING,RESET,CURSOR,TOGGLE,DONE};
      dff blink[25];
      
      dff old_map[25];
      dff current_map[25];
      dff current_cursor[25];
      dff current_score[8];
      dff current_highscore[8];
      dff direction[2];
      
      gen_map_temp gen_map;
      toggle_map toggle_map;
      shift_cursor shift_cursor;
      
    }
  }
  
  decimal2 decimal_score;
  decimal2 decimal_highscore;
  
  seven_seg sevenseg3; // led segment 3
  seven_seg sevenseg2; // led segment 2
  seven_seg sevenseg1; // led segment 1
  seven_seg sevenseg0; // led segment 0
  
  always {
    
    left_btn_cond.in = button[3];
    left_btn.in = left_btn_cond.out;
    
    right_btn_cond.in = button[4];
    right_btn.in = right_btn_cond.out;
    
    up_btn_cond.in = button[0];
    up_btn.in = up_btn_cond.out;
    
    down_btn_cond.in = button[2];
    down_btn.in = down_btn_cond.out;
    
    enter_btn_cond.in = button[1];
    enter_btn.in = enter_btn_cond.out;
    
    start_btn_cond.in = start_button;
    start_btn.in = start_btn_cond.out;
    
    reset_btn_cond.in = reset_button;
    reset_btn.in = reset_btn_cond.out;
    
    reset_ctr.rst = 0;
    
    toggle_map.cursor = current_cursor.q;
    toggle_map.map = current_map.q;
    
    shift_cursor.direction = direction.q;
    shift_cursor.cursor = current_cursor.q;
    
    decimal_highscore.a = current_highscore.q;
    decimal_score.a = current_score.q;
    
    // set dff defaults
    old_map.d = old_map.q;
    current_map.d = current_map.q;
    current_cursor.d = current_cursor.q;
    current_score.d = current_score.q;
    current_highscore.d = current_highscore.q;
    direction.d = direction.q;
    
    case(state.q) {
      
      state.IDLE:
        current_map.d = 25b10;
        
        // change back to start_btn
        if (enter_btn.out) {
          state.d = state.GENMAP;
        }
      
      state.GENMAP:
        
        // change to gen_map.out
        current_map.d = gen_map.out;
        old_map.d = current_map.q;
        current_highscore.d = 8b01100011;
        current_score.d = 8b0;
        current_cursor.d = 8b1;
        
        if (enter_btn.out) {
          state.d = state.PLAYING;
        }
      
      //state.d = state.PLAYING;
      
      state.PLAYING:
        if (reset_btn.out) {
          state.d = state.RESET;
        }
        
        if (enter_btn.out) {
          state.d = state.TOGGLE;
        }
        
        if (up_btn.out) {
          direction.d = 2b00;
          state.d = state.CURSOR;
        }
        
        if (down_btn.out) {
          direction.d = 2b01;
          state.d = state.CURSOR;
        }
        
        if (left_btn.out) {
          direction.d = 2b10;
          state.d = state.CURSOR;
        }
        
        if (right_btn.out) {
          direction.d = 2b11;
          state.d = state.CURSOR;
        }
        
        if (start_btn.out) {
          state.d = state.IDLE;
        }
      
      state.RESET:
        current_map.d = old_map.q;
        state.d = state.PLAYING;
      
      state.TOGGLE:
        toggle_map.map = current_map.q;
        toggle_map.cursor = current_cursor.q;
        
        completed = toggle_map.completed;
        current_map.d = toggle_map.out;
        
        current_score.d = current_score.q + 8b1;
        
        if (completed == 0) {
          state.d = state.PLAYING;
        }
        
        if (completed == 1) {
          reset_ctr.rst = 1;
          state.d = state.DONE;
        }
      
      state.CURSOR:
        shift_cursor.direction = direction.q;
        shift_cursor.cursor = current_cursor.q;
        
        current_cursor.d = shift_cursor.out;
        out = current_cursor.q;
        
        state.d = state.PLAYING;
      
      state.DONE:
        blink.d = blink.q + 1;
        out = 25x{~blink.q[24]};
        
        // to be changed
        current_highscore.d = current_score.q;
        
        if (start_btn.out) {
          current_cursor.d = 25b1;
          current_map.d = 25b0;
          state.d = state.IDLE;
        }
        
        if (reset_btn.out) {
          state.d = state.RESET;
        }
        
        // after some time, if player did not reset, reset by itself
        if (reset_ctr.value == 15) {
          state.d = state.IDLE;
        }
      
      default:
        out = 25b101010101010101010;
    }
    
    blink.d = blink.q + 1;
    out = current_map.q;
    //get_position.cursor = current_cursor.q;
    //pos = get_position.pos;
    //out[pos] = blink.q[24];
    
    sevenseg3.char = decimal_highscore.out1;
    sevenseg2.char = decimal_highscore.out0;
    sevenseg1.char = decimal_score.out1;
    sevenseg0.char = decimal_score.out0;
    
    display_seg0 = ~sevenseg0.segs;
    display_seg1 = ~sevenseg1.segs;
    display_seg2 = ~sevenseg2.segs;
    display_seg3 = ~sevenseg3.segs;
    
  }
}