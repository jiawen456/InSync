module adder_test (
    input clk,
    input rst,
    input char[4],
    input error_mode,
    output out[3][8],
    output test_display[4][5],
    output status[2]
   
  ) {
 
  const LAST_CASE = 13; // to easily change the last case in the test cases
  
  adder adder;
  error_adder error_adder;
  dff blink[25](.clk(clk),.rst(rst));
  
  sig test_a[8];
  sig test_b[8];
  sig test_alufn[6];
  sig test_out[8];
  
  always {
    adder.a = 8b0;
    adder.b = 8b0;
    adder.alufn = 6b0;
    error_adder.a = 8b0;
    error_adder.b = 8b0;
    error_adder.alufn = 6b0;
    test_display = {5d0,5d0,5d0,5d0};
    status = 0;
    out = 3x{{8b0}};
    
    case(char) {
      0: // test 90 + 10 = 100
        test_a = 8b01011010;    // 90
        test_b = 8b00001010;    // 10
        test_alufn = 6b0;       // add
        test_out = 8b01100100;  // 100
        test_display = {5d10,5d13,5d0,5d1}; // display Ad01
        
      1: // test 90 + (-10) = 80
        test_a = 8b01011010;    // 90
        test_b = 8b11110110;    // -10
        test_alufn = 6b0;       // add
        test_out = 8b01010000;  // 80
        test_display = {5d10,5d13,5d0,5d2}; // display Ad02
        
      2: // test -90 + -10 = -100
        test_a = 8b10100110;    // -90
        test_b = 8b11110110;    // -10
        test_alufn = 6b0;       // add
        test_out = 8b10011100;  // -100
        test_display = {5d10,5d13,5d0,5d3}; // display Ad03
        
      3: // test 120 + 10 = 130 (overflow)
        test_a = 8b01111000;    // 120
        test_b = 8b00001010;    // 10
        test_alufn = 6b0;       // add
        test_out = 8b10000010;  // 130 (overflow)
        test_display = {5d10,5d13,5d0,5d4}; // display Ad04
        
      4: // test 90 - 10 = 80
        test_a = 8b01011010;    // 90
        test_b = 8b00001010;    // 10
        test_alufn = 6b1;       // sub
        test_out = 8b01010000;  // 80
        test_display = {5d10,5d13,5d0,5d5}; // display Ad05
        
      5: // test 90 - (-10) = 100
        test_a = 8b01011010;    // 90
        test_b = 8b11110110;    // -10
        test_alufn = 6b1;       // sub
        test_out = 8b01100100;  // 100
        test_display = {5d10,5d13,5d0,5d6}; // display Ad06
        
      6: // test -120 - (-10) = -110
        test_a = 8b10001000;    // -120
        test_b = 8b11110110;    // -10
        test_alufn = 6b1;       // sub
        test_out = 8b10010010;  // -110
        test_display = {5d10,5d13,5d0,5d7}; // display Ad07
        
      7: // test -120 - 10 = -130 (overflow)
        test_a = 8b10001000;    // -120
        test_b = 8b00001010;    // 10
        test_alufn = 6b1;       // sub
        test_out = 8b01111110;  // -130 (overflow)
        test_display = {5d10,5d13,5d0,5d8}; // display Ad08
        
      8: // test 9 * 10 = 90
        test_a = 8b00001001;    // 9
        test_b = 8b00001010;    // 10
        test_alufn = 6b10;      // mul
        test_out = 8b01011010;  // 90
        test_display = {5d10,5d13,5d0,5d9}; // display Ad09
        
      9: // test 9 * (-10) = -90
        test_a = 8b00001001;    // 9
        test_b = 8b11110110;    // -10
        test_alufn = 6b10;      // mul
        test_out = 8b10100110;  // -90
        test_display = {5d10,5d13,5d1,5d0}; // display Ad10
        
      10: // test -9 * (-10) = 90
        test_a = 8b11110111;    // -9
        test_b = 8b11110110;    // -10
        test_alufn = 6b10;      // mul
        test_out = 8b01011010;  // 90
        test_display = {5d10,5d13,5d1,5d1}; // display Ad11
        
      11: // test 20 * 10 = 200 (overflow)
        test_a = 8b00010100;    // 20
        test_b = 8b00001010;    // 10
        test_alufn = 6b10;      // mul
        test_out = 8b11001000;  // 200 (overflow)
        test_display = {5d10,5d13,5d1,5d2}; // display Ad12
        
      12: // test 8 * (-7) = -56
        test_a = 8b00001000;    // 8
        test_b = 8b11111001;    // -7
        test_alufn = 6b10;      // mul
        test_out = 8b11001000;  // -56
        test_display = {5d10,5d13,5d1,5d3}; // display Ad13
        
      13:
        test_a = 8b0;
        test_b = 8b0;
        test_alufn = 6b0;
        test_out = 8b0;
        
        // the last case is set to default as it is only used to mark the end of test cases
        
      default:
        test_a = 8b0;
        test_b = 8b0;
        test_alufn = 6b0;
        test_out = 8b0;
    } 
    
      adder.a = test_a;           // input test_a as a into adder
      adder.b = test_b;           // input test_b as b into adder
      adder.alufn = test_alufn;   // input test_alufn as alufn into adder
    
      if (adder.out == test_out) {
        blink.d = blink.q + 1;
        if (adder.overflow == b1) {
          out = c{{test_out & 8x{~blink.q[24]}},{test_b},{test_a}}; 
        }
        else {
          out = c{{test_out},{test_b},{test_a}};
        }
        // LEDs on the IO shield to light up according to test values, output, a, and b, from left to right respectively
      
        status = 1;     
        // status 1 means that the test case is successful
      }
    
      if (char == LAST_CASE) {
        status = 2;
        // status 2 means that the test cases has finished running
      }   
    
      if (error_mode == 1) {
        error_adder.a = test_a;
        error_adder.b = test_b;
        error_adder.alufn = test_alufn;
        if (error_adder.out == test_out) {
          out = c{{test_out},{test_b},{test_a}};
          status = 1; 
        } 
        else {
          status = 0;
        }
      }  
    
    } 
    
}