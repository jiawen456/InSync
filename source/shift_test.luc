module shift_test (
    input char[4],
    output out[3][8],
    output test_display[4][5],
    output status[2]
   
  ) {
 
  const LAST_CASE = 4; // to easily change the last case in the test cases
  
  shift shift;
  
  sig test_a[8];
  sig test_b[8];
  sig test_alufn[6];
  sig test_out[8];
  
  always {
    shift.a = 8b0;
    shift.b = 8b0;
    shift.alufn = 6b0;
    test_display = {5d0,5d0,5d0,5d0};
    status = 0;
    out = 3x{{8b0}};
    
    case(char) {
      0: // test 01011010 shift left 4 bits
        test_a = 8b01011010;    // 90
        test_b = 8b01000100;    // b[2:0] = 4
        test_alufn = 6b0;       // shift left
        test_out = 8b10100000;  // filled with 0's
        test_display = {5d21,5d16,5d0,5d1}; // display SH01
        
      1: // test 01011010 shift right 5 bits
        test_a = 8b01011010;    // 90
        test_b = 8b01000101;    // b[2:0] = 5
        test_alufn = 6b1;       // shift right
        test_out = 8b00000010;  // filled with 0's
        test_display = {5d21,5d16,5d0,5d2}; // display SH02
        
      2: // test 01011010 shift right with sign extension 4 bits
        test_a = 8b01011010;    // 90
        test_b = 8b01000100;    // b[2:0] = 4
        test_alufn = 6b11;       // shift right with sign extension
        test_out = 8b00000101;  // sign extended
        test_display = {5d21,5d16,5d0,5d3}; // display SH03
        
      3: // test 10011100 shift right with sign extension 4 bits
        test_a = 8b10011100;    // -100
        test_b = 8b01000100;    // b[2:0] = 4
        test_alufn = 6b11;       // shift right with sign extension
        test_out = 8b11111001;  // sign extended
        test_display = {5d21,5d16,5d0,5d4}; // display SH04
        
      4:
        test_a = 8b0;
        test_b = 8b0;
 test_alufn = 6b0;
        test_out = 8b0;
        
        // the last case is set to default as it is only used to mark the end of test cases
        
      default:
        test_a = 8b0;
        test_b = 8b0;
 test_alufn = 6b0;
        test_out = 8b0;
    } 
     
      shift.a = test_a;           // input test_a as a into shifter
      shift.b = test_b;           // input test_b as b into shifter
      shift.alufn = test_alufn;   // input test_alufn as alufn into shifter

      if (shift.out == test_out) {
        out = c{{test_out},{test_b},{test_a}}; 
        // LEDs on the IO shield to light up according to test values, output, a, and b, from left to right respectively
      
        status = 1;     
        // status 1 means that the test case is successful
      }
    
      if (char == LAST_CASE) {
        status = 2;
        // status 2 means that the test cases has finished running
      }   
    } 
    
}