/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module processor_2 (
    input clk,
    input rst,
    input [4:0] button,
    input start_button,
    input reset_button,
    output reg [7:0] display_seg0,
    output reg [7:0] display_seg1,
    output reg [7:0] display_seg2,
    output reg [7:0] display_seg3,
    output reg [24:0] out
  );
  
  
  
  reg completed;
  
  reg [24:0] pos;
  
  wire [1-1:0] M_left_btn_out;
  reg [1-1:0] M_left_btn_in;
  edge_detector_4 left_btn (
    .clk(clk),
    .in(M_left_btn_in),
    .out(M_left_btn_out)
  );
  wire [1-1:0] M_left_btn_cond_out;
  reg [1-1:0] M_left_btn_cond_in;
  button_conditioner_5 left_btn_cond (
    .clk(clk),
    .in(M_left_btn_cond_in),
    .out(M_left_btn_cond_out)
  );
  wire [1-1:0] M_right_btn_out;
  reg [1-1:0] M_right_btn_in;
  edge_detector_4 right_btn (
    .clk(clk),
    .in(M_right_btn_in),
    .out(M_right_btn_out)
  );
  wire [1-1:0] M_right_btn_cond_out;
  reg [1-1:0] M_right_btn_cond_in;
  button_conditioner_5 right_btn_cond (
    .clk(clk),
    .in(M_right_btn_cond_in),
    .out(M_right_btn_cond_out)
  );
  wire [1-1:0] M_up_btn_out;
  reg [1-1:0] M_up_btn_in;
  edge_detector_4 up_btn (
    .clk(clk),
    .in(M_up_btn_in),
    .out(M_up_btn_out)
  );
  wire [1-1:0] M_up_btn_cond_out;
  reg [1-1:0] M_up_btn_cond_in;
  button_conditioner_5 up_btn_cond (
    .clk(clk),
    .in(M_up_btn_cond_in),
    .out(M_up_btn_cond_out)
  );
  wire [1-1:0] M_down_btn_out;
  reg [1-1:0] M_down_btn_in;
  edge_detector_4 down_btn (
    .clk(clk),
    .in(M_down_btn_in),
    .out(M_down_btn_out)
  );
  wire [1-1:0] M_down_btn_cond_out;
  reg [1-1:0] M_down_btn_cond_in;
  button_conditioner_5 down_btn_cond (
    .clk(clk),
    .in(M_down_btn_cond_in),
    .out(M_down_btn_cond_out)
  );
  wire [1-1:0] M_enter_btn_out;
  reg [1-1:0] M_enter_btn_in;
  edge_detector_4 enter_btn (
    .clk(clk),
    .in(M_enter_btn_in),
    .out(M_enter_btn_out)
  );
  wire [1-1:0] M_enter_btn_cond_out;
  reg [1-1:0] M_enter_btn_cond_in;
  button_conditioner_5 enter_btn_cond (
    .clk(clk),
    .in(M_enter_btn_cond_in),
    .out(M_enter_btn_cond_out)
  );
  wire [1-1:0] M_start_btn_out;
  reg [1-1:0] M_start_btn_in;
  edge_detector_4 start_btn (
    .clk(clk),
    .in(M_start_btn_in),
    .out(M_start_btn_out)
  );
  wire [1-1:0] M_start_btn_cond_out;
  reg [1-1:0] M_start_btn_cond_in;
  button_conditioner_5 start_btn_cond (
    .clk(clk),
    .in(M_start_btn_cond_in),
    .out(M_start_btn_cond_out)
  );
  wire [1-1:0] M_reset_btn_out;
  reg [1-1:0] M_reset_btn_in;
  edge_detector_4 reset_btn (
    .clk(clk),
    .in(M_reset_btn_in),
    .out(M_reset_btn_out)
  );
  wire [1-1:0] M_reset_btn_cond_out;
  reg [1-1:0] M_reset_btn_cond_in;
  button_conditioner_5 reset_btn_cond (
    .clk(clk),
    .in(M_reset_btn_cond_in),
    .out(M_reset_btn_cond_out)
  );
  wire [4-1:0] M_reset_ctr_value;
  reg [1-1:0] M_reset_ctr_rst;
  counter_18 reset_ctr (
    .clk(clk),
    .rst(M_reset_ctr_rst),
    .value(M_reset_ctr_value)
  );
  localparam IDLE_state = 3'd0;
  localparam GENMAP_state = 3'd1;
  localparam PLAYING_state = 3'd2;
  localparam RESET_state = 3'd3;
  localparam CURSOR_state = 3'd4;
  localparam TOGGLE_state = 3'd5;
  localparam DONE_state = 3'd6;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  reg [24:0] M_blink_d, M_blink_q = 1'h0;
  reg [24:0] M_old_map_d, M_old_map_q = 1'h0;
  reg [24:0] M_current_map_d, M_current_map_q = 1'h0;
  reg [24:0] M_current_cursor_d, M_current_cursor_q = 1'h0;
  reg [7:0] M_current_score_d, M_current_score_q = 1'h0;
  reg [7:0] M_current_highscore_d, M_current_highscore_q = 1'h0;
  reg [1:0] M_direction_d, M_direction_q = 1'h0;
  wire [25-1:0] M_gen_map_out;
  gen_map_temp_19 gen_map (
    .clk(clk),
    .rst(rst),
    .out(M_gen_map_out)
  );
  wire [25-1:0] M_toggle_map_out;
  wire [1-1:0] M_toggle_map_completed;
  reg [25-1:0] M_toggle_map_cursor;
  reg [25-1:0] M_toggle_map_map;
  toggle_map_20 toggle_map (
    .clk(clk),
    .rst(rst),
    .cursor(M_toggle_map_cursor),
    .map(M_toggle_map_map),
    .out(M_toggle_map_out),
    .completed(M_toggle_map_completed)
  );
  wire [25-1:0] M_shift_cursor_out;
  reg [2-1:0] M_shift_cursor_direction;
  reg [25-1:0] M_shift_cursor_cursor;
  shift_cursor_21 shift_cursor (
    .clk(clk),
    .rst(rst),
    .direction(M_shift_cursor_direction),
    .cursor(M_shift_cursor_cursor),
    .out(M_shift_cursor_out)
  );
  
  wire [4-1:0] M_decimal_score_out1;
  wire [4-1:0] M_decimal_score_out0;
  reg [8-1:0] M_decimal_score_a;
  decimal2_22 decimal_score (
    .a(M_decimal_score_a),
    .out1(M_decimal_score_out1),
    .out0(M_decimal_score_out0)
  );
  
  wire [4-1:0] M_decimal_highscore_out1;
  wire [4-1:0] M_decimal_highscore_out0;
  reg [8-1:0] M_decimal_highscore_a;
  decimal2_22 decimal_highscore (
    .a(M_decimal_highscore_a),
    .out1(M_decimal_highscore_out1),
    .out0(M_decimal_highscore_out0)
  );
  
  wire [8-1:0] M_sevenseg3_segs;
  reg [5-1:0] M_sevenseg3_char;
  seven_seg_24 sevenseg3 (
    .char(M_sevenseg3_char),
    .segs(M_sevenseg3_segs)
  );
  
  wire [8-1:0] M_sevenseg2_segs;
  reg [5-1:0] M_sevenseg2_char;
  seven_seg_24 sevenseg2 (
    .char(M_sevenseg2_char),
    .segs(M_sevenseg2_segs)
  );
  
  wire [8-1:0] M_sevenseg1_segs;
  reg [5-1:0] M_sevenseg1_char;
  seven_seg_24 sevenseg1 (
    .char(M_sevenseg1_char),
    .segs(M_sevenseg1_segs)
  );
  
  wire [8-1:0] M_sevenseg0_segs;
  reg [5-1:0] M_sevenseg0_char;
  seven_seg_24 sevenseg0 (
    .char(M_sevenseg0_char),
    .segs(M_sevenseg0_segs)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_current_score_d = M_current_score_q;
    M_blink_d = M_blink_q;
    M_direction_d = M_direction_q;
    M_current_cursor_d = M_current_cursor_q;
    M_current_highscore_d = M_current_highscore_q;
    M_current_map_d = M_current_map_q;
    M_old_map_d = M_old_map_q;
    
    M_left_btn_cond_in = button[3+0-:1];
    M_left_btn_in = M_left_btn_cond_out;
    M_right_btn_cond_in = button[4+0-:1];
    M_right_btn_in = M_right_btn_cond_out;
    M_up_btn_cond_in = button[0+0-:1];
    M_up_btn_in = M_up_btn_cond_out;
    M_down_btn_cond_in = button[2+0-:1];
    M_down_btn_in = M_down_btn_cond_out;
    M_enter_btn_cond_in = button[1+0-:1];
    M_enter_btn_in = M_enter_btn_cond_out;
    M_start_btn_cond_in = start_button;
    M_start_btn_in = M_start_btn_cond_out;
    M_reset_btn_cond_in = reset_button;
    M_reset_btn_in = M_reset_btn_cond_out;
    M_reset_ctr_rst = 1'h0;
    M_toggle_map_cursor = M_current_cursor_q;
    M_toggle_map_map = M_current_map_q;
    M_shift_cursor_direction = M_direction_q;
    M_shift_cursor_cursor = M_current_cursor_q;
    M_decimal_highscore_a = M_current_highscore_q;
    M_decimal_score_a = M_current_score_q;
    M_old_map_d = M_old_map_q;
    M_current_map_d = M_current_map_q;
    M_current_cursor_d = M_current_cursor_q;
    M_current_score_d = M_current_score_q;
    M_current_highscore_d = M_current_highscore_q;
    M_direction_d = M_direction_q;
    
    case (M_state_q)
      IDLE_state: begin
        M_current_map_d = 25'h0000002;
        if (M_enter_btn_out) begin
          M_state_d = GENMAP_state;
        end
      end
      GENMAP_state: begin
        M_current_map_d = M_gen_map_out;
        M_old_map_d = M_current_map_q;
        M_current_highscore_d = 8'h63;
        M_current_score_d = 8'h00;
        M_current_cursor_d = 8'h01;
        if (M_enter_btn_out) begin
          M_state_d = PLAYING_state;
        end
      end
      PLAYING_state: begin
        if (M_reset_btn_out) begin
          M_state_d = RESET_state;
        end
        if (M_enter_btn_out) begin
          M_state_d = TOGGLE_state;
        end
        if (M_up_btn_out) begin
          M_direction_d = 2'h0;
          M_state_d = CURSOR_state;
        end
        if (M_down_btn_out) begin
          M_direction_d = 2'h1;
          M_state_d = CURSOR_state;
        end
        if (M_left_btn_out) begin
          M_direction_d = 2'h2;
          M_state_d = CURSOR_state;
        end
        if (M_right_btn_out) begin
          M_direction_d = 2'h3;
          M_state_d = CURSOR_state;
        end
        if (M_start_btn_out) begin
          M_state_d = IDLE_state;
        end
      end
      RESET_state: begin
        M_current_map_d = M_old_map_q;
        M_state_d = PLAYING_state;
      end
      TOGGLE_state: begin
        M_toggle_map_map = M_current_map_q;
        M_toggle_map_cursor = M_current_cursor_q;
        completed = M_toggle_map_completed;
        M_current_map_d = M_toggle_map_out;
        M_current_score_d = M_current_score_q + 8'h01;
        if (completed == 1'h0) begin
          M_state_d = PLAYING_state;
        end
        if (completed == 1'h1) begin
          M_reset_ctr_rst = 1'h1;
          M_state_d = DONE_state;
        end
      end
      CURSOR_state: begin
        M_shift_cursor_direction = M_direction_q;
        M_shift_cursor_cursor = M_current_cursor_q;
        M_current_cursor_d = M_shift_cursor_out;
        out = M_current_cursor_q;
        M_state_d = PLAYING_state;
      end
      DONE_state: begin
        M_blink_d = M_blink_q + 1'h1;
        out = {5'h19{~M_blink_q[24+0-:1]}};
        M_current_highscore_d = M_current_score_q;
        if (M_start_btn_out) begin
          M_current_cursor_d = 25'h0000001;
          M_current_map_d = 25'h0000000;
          M_state_d = IDLE_state;
        end
        if (M_reset_btn_out) begin
          M_state_d = RESET_state;
        end
        if (M_reset_ctr_value == 4'hf) begin
          M_state_d = IDLE_state;
        end
      end
      default: begin
        out = 25'h002aaaa;
      end
    endcase
    M_blink_d = M_blink_q + 1'h1;
    out = M_current_map_q;
    M_sevenseg3_char = M_decimal_highscore_out1;
    M_sevenseg2_char = M_decimal_highscore_out0;
    M_sevenseg1_char = M_decimal_score_out1;
    M_sevenseg0_char = M_decimal_score_out0;
    display_seg0 = ~M_sevenseg0_segs;
    display_seg1 = ~M_sevenseg1_segs;
    display_seg2 = ~M_sevenseg2_segs;
    display_seg3 = ~M_sevenseg3_segs;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_blink_q <= 1'h0;
      M_old_map_q <= 1'h0;
      M_current_map_q <= 1'h0;
      M_current_cursor_q <= 1'h0;
      M_current_score_q <= 1'h0;
      M_current_highscore_q <= 1'h0;
      M_direction_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_blink_q <= M_blink_d;
      M_old_map_q <= M_old_map_d;
      M_current_map_q <= M_current_map_d;
      M_current_cursor_q <= M_current_cursor_d;
      M_current_score_q <= M_current_score_d;
      M_current_highscore_q <= M_current_highscore_d;
      M_direction_q <= M_direction_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
